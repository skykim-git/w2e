{"ast":null,"code":"var _jsxFileName = \"/Users/friday/Documents/TaskForceOrganization/frontend/src/components/NearbyRestaurants.jsx\";\nimport React, { Component } from 'react';\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NearbyRestaurants extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      restaurants: []\n    };\n    this.searchNearbyRestaurants = position => {\n      const {\n        google\n      } = this.props;\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n\n      // Create a PlacesService instance\n      const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n      // Define search parameters\n      const request = {\n        location: new google.maps.LatLng(latitude, longitude),\n        radius: 1000,\n        // Search radius in meters (adjust as needed)\n        type: 'restaurant',\n        rankBy: google.maps.places.RankBy.PROMINENCE // Sort by prominence\n      };\n\n      // Perform nearby search\n      placesService.nearbySearch(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          // Filter restaurants with 50+ reviews\n          const filteredRestaurants = results.filter(restaurant => restaurant.user_ratings_total >= 50);\n          // Rank the restaurants (you can use your own ranking algorithm)\n          const sortedRestaurants = results.slice(0, 5); // Select top 5 restaurants\n\n          // Fetch photos for each restaurant\n          const restaurantPromises = sortedRestaurants.map(restaurant => {\n            return new Promise((resolve, reject) => {\n              placesService.getDetails({\n                placeId: restaurant.place_id,\n                fields: ['photos']\n              }, (place, status) => {\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\n                  // Get the first photo if available\n                  const photoUrl = place.photos && place.photos[0].getUrl();\n                  resolve({\n                    ...restaurant,\n                    photoUrl\n                  });\n                } else {\n                  console.error('Error fetching restaurant details:', status);\n                  resolve({\n                    ...restaurant,\n                    photoUrl: null\n                  });\n                }\n              });\n            });\n          });\n\n          // Wait for all photo fetch requests to complete\n          Promise.all(restaurantPromises).then(restaurantsWithPhotos => {\n            this.setState({\n              restaurants: restaurantsWithPhotos\n            });\n          });\n        } else {\n          console.error('Error fetching nearby restaurants:', status);\n        }\n      });\n    };\n  }\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  render() {\n    const {\n      restaurants\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Top 5 Nearby Restaurants\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: restaurants.map((restaurant, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [restaurant.name, restaurant.photoUrl && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: restaurant.photoUrl,\n            alt: `Photo of ${restaurant.name}`,\n            style: {\n              height: '4em'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 39\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCnv1eojLjZwtHpBXy_QZ3bSv2slXEsLyc'\n})(NearbyRestaurants);","map":{"version":3,"names":["React","Component","GoogleApiWrapper","jsxDEV","_jsxDEV","NearbyRestaurants","constructor","args","state","restaurants","searchNearbyRestaurants","position","google","props","latitude","longitude","coords","placesService","maps","places","PlacesService","document","createElement","request","location","LatLng","radius","type","rankBy","RankBy","PROMINENCE","nearbySearch","results","status","PlacesServiceStatus","OK","filteredRestaurants","filter","restaurant","user_ratings_total","sortedRestaurants","slice","restaurantPromises","map","Promise","resolve","reject","getDetails","placeId","place_id","fields","place","photoUrl","photos","getUrl","console","error","all","then","restaurantsWithPhotos","setState","componentDidMount","navigator","geolocation","getCurrentPosition","log","render","children","fileName","_jsxFileName","lineNumber","columnNumber","index","name","src","alt","style","height","apiKey"],"sources":["/Users/friday/Documents/TaskForceOrganization/frontend/src/components/NearbyRestaurants.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { GoogleApiWrapper } from 'google-maps-react';\n\nclass NearbyRestaurants extends Component {\n  state = {\n    restaurants: []\n  };\n\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  searchNearbyRestaurants = (position) => {\n    const { google } = this.props;\n    const { latitude, longitude } = position.coords;\n\n    // Create a PlacesService instance\n    const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n    // Define search parameters\n    const request = {\n      location: new google.maps.LatLng(latitude, longitude),\n      radius: 1000, // Search radius in meters (adjust as needed)\n      type: 'restaurant',\n      rankBy: google.maps.places.RankBy.PROMINENCE // Sort by prominence\n    };\n\n    // Perform nearby search\n    placesService.nearbySearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        // Filter restaurants with 50+ reviews\n        const filteredRestaurants = results.filter(restaurant => restaurant.user_ratings_total >= 50);\n        // Rank the restaurants (you can use your own ranking algorithm)\n        const sortedRestaurants = results.slice(0, 5); // Select top 5 restaurants\n        \n        // Fetch photos for each restaurant\n        const restaurantPromises = sortedRestaurants.map(restaurant => {\n          return new Promise((resolve, reject) => {\n            placesService.getDetails({\n              placeId: restaurant.place_id,\n              fields: ['photos']\n            }, (place, status) => {\n              if (status === google.maps.places.PlacesServiceStatus.OK) {\n                // Get the first photo if available\n                const photoUrl = place.photos && place.photos[0].getUrl();\n                resolve({ ...restaurant, photoUrl });\n              } else {\n                console.error('Error fetching restaurant details:', status);\n                resolve({ ...restaurant, photoUrl: null });\n              }\n            });\n          });\n        });\n\n        // Wait for all photo fetch requests to complete\n        Promise.all(restaurantPromises).then(restaurantsWithPhotos => {\n          this.setState({ restaurants: restaurantsWithPhotos });\n        });\n      } else {\n        console.error('Error fetching nearby restaurants:', status);\n      }\n    });\n  }\n\n  render() {\n    const { restaurants } = this.state;\n\n    return (\n      <div>\n        <h2>Top 5 Nearby Restaurants</h2>\n        <ul>\n          {restaurants.map((restaurant, index) => (\n            <li key={index}>\n              {restaurant.name}\n              {restaurant.photoUrl && <img src={restaurant.photoUrl} alt={`Photo of ${restaurant.name}`} style={{ height: '4em' }} />}\n            </li>\n          ))}\n        </ul>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCnv1eojLjZwtHpBXy_QZ3bSv2slXEsLyc'\n})(NearbyRestaurants);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}