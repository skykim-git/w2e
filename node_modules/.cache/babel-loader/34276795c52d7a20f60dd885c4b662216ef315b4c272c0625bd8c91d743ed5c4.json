{"ast":null,"code":"var _jsxFileName = \"/Users/friday/Documents/w2e/frontend/src/components/FisheyeImage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FisheyeImage = ({\n  svgContent\n}) => {\n  _s();\n  const canvasRef = useRef(null);\n  const size = 400; // Size of the canvas\n\n  useEffect(() => {\n    // Defines background canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d'); // Loads 2d drawer\n\n    // Create an image from the SVG content\n    const img = new Image();\n    const svgBlob = new Blob([svgContent], {\n      type: 'image/svg+xml;charset=utf-8'\n    });\n    const url = URL.createObjectURL(svgBlob);\n    img.onload = function () {\n      // Draw the original image\n      ctx.drawImage(img, 0, 0, size, size);\n\n      // Get image data\n      const imageData = ctx.getImageData(0, 0, size, size);\n      const pixels = imageData.data;\n      const pixelsCopy = [];\n\n      // Copy pixels\n      for (let i = 0; i < pixels.length; i += 4) {\n        // 4 consequtive \"pixels\" represents a pixel (RGBA)\n        pixelsCopy.push([pixels[i], pixels[i + 1], pixels[i + 2], pixels[i + 3]]);\n      }\n\n      // Apply fisheye effect\n      const result = fisheye(pixelsCopy, size, size);\n\n      // Update image data\n      for (let i = 0; i < result.length; i++) {\n        const index = i * 4;\n        if (result[i] !== undefined) {\n          pixels[index] = result[i][0];\n          pixels[index + 1] = result[i][1];\n          pixels[index + 2] = result[i][2];\n          pixels[index + 3] = result[i][3];\n        }\n      }\n\n      // Put the modified image data back to the canvas\n      ctx.putImageData(imageData, 0, 0);\n    };\n    img.src = url;\n    return () => URL.revokeObjectURL(url);\n  }, [svgContent]);\n  function fisheye(srcpixels, w, h) {\n    const dstpixels = srcpixels.slice();\n    const centerX = w / 2;\n    const centerY = h / 2;\n    const radius = Math.min(w, h) / 1.5;\n    for (let y = 0; y < h; y++) {\n      for (let x = 0; x < w; x++) {\n        // Calculates distance from the center\n        const dx = x - centerX;\n        const dy = y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        // For pixels smaller than the radius\n        if (distance < radius) {\n          const percent = Math.pow(distance * 1 / radius, 1.2);\n          const ySteatch = 0.5;\n          const newX = dx * percent + centerX;\n          const newY = dy * percent * ySteatch + centerY;\n          const srcIndex = Math.floor(newY) * w + Math.floor(newX);\n          const dstIndex = y * w + x;\n          if (srcIndex >= 0 && srcIndex < w * h) {\n            dstpixels[dstIndex] = srcpixels[srcIndex];\n          }\n        }\n      }\n    }\n    return dstpixels;\n  }\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    width: size,\n    height: size\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 10\n  }, this);\n};\n_s(FisheyeImage, \"UJgi7ynoup7eqypjnwyX/s32POg=\");\n_c = FisheyeImage;\nexport default FisheyeImage;\nvar _c;\n$RefreshReg$(_c, \"FisheyeImage\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","FisheyeImage","svgContent","_s","canvasRef","size","canvas","current","ctx","getContext","img","Image","svgBlob","Blob","type","url","URL","createObjectURL","onload","drawImage","imageData","getImageData","pixels","data","pixelsCopy","i","length","push","result","fisheye","index","undefined","putImageData","src","revokeObjectURL","srcpixels","w","h","dstpixels","slice","centerX","centerY","radius","Math","min","y","x","dx","dy","distance","sqrt","percent","pow","ySteatch","newX","newY","srcIndex","floor","dstIndex","ref","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/friday/Documents/w2e/frontend/src/components/FisheyeImage.jsx"],"sourcesContent":["import React, { useEffect, useRef } from 'react';\n\nconst FisheyeImage = ({ svgContent }) => {\n  const canvasRef = useRef(null);\n  const size = 400; // Size of the canvas\n\n  useEffect(() => {\n    // Defines background canvas\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d'); // Loads 2d drawer\n\n    // Create an image from the SVG content\n    const img = new Image();\n    const svgBlob = new Blob([svgContent], { type: 'image/svg+xml;charset=utf-8' });\n    const url = URL.createObjectURL(svgBlob);\n\n    img.onload = function() {\n\n\n      // Draw the original image\n      ctx.drawImage(img, 0, 0, size, size);\n\n      // Get image data\n      const imageData = ctx.getImageData(0, 0, size, size);\n      const pixels = imageData.data;\n      const pixelsCopy = [];\n\n      // Copy pixels\n      for (let i = 0; i < pixels.length; i += 4) { // 4 consequtive \"pixels\" represents a pixel (RGBA)\n        pixelsCopy.push([pixels[i], pixels[i+1], pixels[i+2], pixels[i+3]]);\n      }\n\n      // Apply fisheye effect\n      const result = fisheye(pixelsCopy, size, size);\n\n      // Update image data\n      for (let i = 0; i < result.length; i++) {\n        const index = i * 4;\n        if (result[i] !== undefined) {\n          pixels[index] = result[i][0];\n          pixels[index + 1] = result[i][1];\n          pixels[index + 2] = result[i][2];\n          pixels[index + 3] = result[i][3];\n        }\n      }\n\n      // Put the modified image data back to the canvas\n      ctx.putImageData(imageData, 0, 0);\n    };\n\n    img.src = url;\n\n    return () => URL.revokeObjectURL(url);\n  }, [svgContent]);\n\n  function fisheye(srcpixels, w, h) {\n    const dstpixels = srcpixels.slice();\n    const centerX = w / 2;\n    const centerY = h / 2;\n    const radius = Math.min(w, h) / 1.5;\n\n    for (let y = 0; y < h; y++) {\n      for (let x = 0; x < w; x++) {\n        // Calculates distance from the center\n        const dx = x - centerX;\n        const dy = y - centerY;\n        const distance = Math.sqrt(dx * dx + dy * dy);\n        // For pixels smaller than the radius\n        if (distance < radius) {\n          const percent = Math.pow(distance*1 / radius, 1.2);\n          const ySteatch = 0.5\n          const newX = dx * percent + centerX;\n          const newY = dy * percent * ySteatch + centerY;\n          \n          const srcIndex = Math.floor(newY) * w + Math.floor(newX);\n          const dstIndex = y * w + x;\n          \n          if (srcIndex >= 0 && srcIndex < w * h) {\n            dstpixels[dstIndex] = srcpixels[srcIndex];\n          }\n        }\n      }\n    }\n    return dstpixels;\n  }\n\n  return <canvas ref={canvasRef} width={size} height={size} />;\n};\n\nexport default FisheyeImage;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}