{"ast":null,"code":"var _jsxFileName = \"/Users/friday/Documents/w2e/frontend/src/components/NearbyRestaurants.jsx\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport './style.css';\nimport nlp from 'compromise';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nclass NearbyRestaurants extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bestRestaurants: [],\n      nextPageToken: null,\n      // Initialize nextPageToken state\n      showMapModal: false,\n      // State to control visibility of the map modal\n      currentLocation: null,\n      // Store current location\n      currentIndex: 0,\n      showFirstPage: true,\n      isSpinning: false,\n      restReady: false\n    };\n    this.searchNearbyRestaurants = position => {\n      const {\n        google\n      } = this.props;\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n\n      // Create a PlacesService instance\n      const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n      // Define search parameters\n      const request = {\n        location: new google.maps.LatLng(latitude, longitude),\n        radius: 50000,\n        // Search radius in meters (adjust as needed)\n        type: 'restaurant',\n        rankBy: google.maps.places.RankBy.PROMINENCE,\n        // Sort by prominence\n        types: ['restaurant']\n      };\n\n      // Perform nearby search\n      placesService.nearbySearch(request, (results, status, pagination) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          // Filter restaurants with 4+ stars and 50+ reviews\n          const filteredRestaurants = results.filter(restaurant => {\n            return restaurant.rating >= 4.0 && restaurant.user_ratings_total >= 30 && !restaurant.name.toLowerCase().includes('hotel');\n          });\n\n          // Fetch category for each restaurant\n          const promises = filteredRestaurants.map(restaurant => {\n            return new Promise((resolve, reject) => {\n              // Get details for each restaurant\n              const detailsRequest = {\n                placeId: restaurant.place_id,\n                fields: ['name', 'types', 'reviews'] // Add 'reviews' field to retrieve reviews\n              };\n              placesService.getDetails(detailsRequest, (placeDetails, status) => {\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\n                  // const category = placeDetails.types && placeDetails.types.length > 0 ? placeDetails.types[0] : 'Uncategorized';\n                  const topReview = placeDetails.reviews && placeDetails.reviews.length > 0 ? placeDetails.reviews[0] : 'null'; // Get the top review\n                  console.log('res fetch resolved', status);\n                  resolve({\n                    ...restaurant,\n                    topReview\n                  });\n                } else {\n                  console.error('Error fetching restaurant details:', status);\n                  reject(status);\n                }\n              });\n            });\n          });\n\n          // To find the representative menu\n          // Fetch reviews for each restaurant and extract text\n          const reviewPromises = filteredRestaurants.map(restaurant => {\n            return new Promise((resolve, reject) => {\n              const detailsRequest = {\n                placeId: restaurant.place_id,\n                fields: ['reviews']\n              };\n              placesService.getDetails(detailsRequest, (placeDetails, status) => {\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\n                  // console.log(placeDetails.reviews); \n                  const reviews = placeDetails.reviews || [];\n                  const reviewTexts = reviews.map(review => review.text);\n                  // console.log(reviews, status);\n                  // console.log(reviewTexts, status);\n                  // console.log(reviewTexts[0], status);\n\n                  resolve(reviewTexts); //not empty\n                } else {\n                  console.error('Error fetching reviews for restaurant:', status);\n                  reject();\n                }\n              });\n            });\n          });\n\n          // Resolve all promises\n          // mapping problem here?\n          Promise.all([...promises, ...reviewPromises]).then(results => {\n            // Separate the restaurant and review results based on the original promise arrays\n            const restaurantsWithReviews = results.slice(0, promises.length);\n            const reviewTextsArray = results.slice(promises.length);\n\n            // Update state with the filtered restaurants, category, and nextPageToken\n            this.setState({\n              bestRestaurants: restaurantsWithReviews\n            });\n            this.setState({\n              restReady: true\n            });\n            console.log(reviewTextsArray, 'nok');\n            console.log(reviewTextsArray[0], 'nok_1');\n            // reviewTextsArray.forEach((reviewTexts) => {\n            //   console.log(reviewTexts, 'nok_2');\n            //   reviewTexts.forEach(reviewSet => {\n            //     console.log(reviewSet, 'nok_3');\n            //   });\n\n            // });\n\n            const mostRepeatedNouns = [];\n\n            // Process each set of reviews\n            reviewTextsArray.forEach(reviewTexts => {\n              // Initialize variables to store most repeated noun for this set of reviews\n              let mostRepeatedNoun;\n              let maxCount = 0;\n              console.log(reviewTexts, 'nok_2');\n              // Flatten reviewTextsArray into a single array of review texts\n              const allReviewsText = [].concat.apply([], reviewTexts);\n              console.log(allReviewsText, 'allReviewsText');\n              const giantString = allReviewsText.join(' '); // Use a space as a separator\n              // const nlp = require('compromise');\n              console.log(giantString, 'giantString');\n              // Tokenization (split text into words)\n              const allWords = allReviewsText.flatMap(text => text.toLowerCase().split(/[\\s\\W]+/));\n              console.log(allWords, 'allWords');\n              // Perform POS tagging\n              const doc = nlp(giantString);\n              const nouns = doc.nouns().out('array');\n\n              // Define a list of common pronouns to filter out\n              const pronounsList = [\"i\", \"you\", \"he\", \"she\", \"it\", \"we\", \"they\", \"me\", \"him\", \"her\", \"us\", \"them\", \"my\", \"your\", \"his\", \"its\", \"our\", \"their\", \"mine\", \"yours\", \"hers\", \"ours\", \"theirs\"];\n              const articlesList = [\"a\", \"an\", \"the\"];\n              const customList = [\"food\", \"place\"];\n\n              // Combine both lists into a single exclusion list\n              const exclusionList = [...pronounsList, ...articlesList, ...customList];\n\n              // Convert the noun phrases to individual words and filter out pronouns and articles\n              const individualNouns = nouns.flatMap(phrase => phrase.toLowerCase().split(/\\W+/)).filter(word => word && !exclusionList.includes(word));\n              console.log(individualNouns, 'individualNouns');\n\n              // Count occurrences of each noun\n              const nounCounts = {};\n              individualNouns.forEach(noun => {\n                nounCounts[noun] = (nounCounts[noun] || 0) + 1;\n              });\n              console.log('here');\n\n              // Find most repeated noun in this set of reviews\n              Object.entries(nounCounts).forEach(([noun, count]) => {\n                if (count > maxCount) {\n                  mostRepeatedNoun = noun;\n                  maxCount = count;\n                }\n              });\n\n              // Store the most repeated noun for this restaurant\n              mostRepeatedNouns.push({\n                mostRepeatedNoun\n              });\n            });\n\n            // Set the most repeated nouns in the state\n            this.setState({\n              mostRepeatedNouns\n            });\n          })\n\n          // .catch(error => {\n          //   console.error('Error fetching restaurant details:', error);\n          // });\n\n          //   // Flatten reviewTextsArray into a single array of review texts\n          //   const allReviewsText = [].concat.apply([], reviewTextsArray);\n          //   const giantString = allReviewsText.join(' '); // Use a space as a separator\n          //   // const nlp = require('compromise');\n          //   console.log(giantString, 'giantString');\n          //   // Tokenization (split text into words)\n          //   const allWords = allReviewsText.flatMap(text => text.toLowerCase().split(/[\\s\\W]+/));\n          //   console.log(allWords, 'allWords');\n          //   // Perform POS tagging\n          //   const doc = nlp(giantString);\n          //   const nouns = doc.nouns().out('array');\n\n          //   // Define a list of common pronouns to filter out\n          //   const pronounsList = [\"i\", \"you\", \"he\", \"she\", \"it\", \"we\", \"they\", \"me\", \"him\", \"her\", \"us\", \"them\", \"my\", \"your\", \"his\", \"its\", \"our\", \"their\", \"mine\", \"yours\", \"hers\", \"ours\", \"theirs\"];\n          //   const articlesList = [\"a\", \"an\", \"the\"];\n          //   const customList = [\"food\", \"place\"];\n\n          //   // Combine both lists into a single exclusion list\n          //   const exclusionList = [...pronounsList, ...articlesList, ...customList];\n\n          //   // Convert the noun phrases to individual words and filter out pronouns and articles\n          //   const individualNouns = nouns.flatMap(phrase => phrase.toLowerCase().split(/\\W+/))\n          //                                       .filter(word => word && !exclusionList.includes(word));\n\n          //   console.log(individualNouns,'individualNouns');\n          //   // nouns = individualNouns;\n          //   // console.log(nouns, 'nouns');\n\n          //   // // POS Tagging (identify nouns)\n          //   // const nounRegex = /^N/;\n          //   // const nouns = allWords.filter(word => nounRegex.test(word));\n          //   // console.log(nouns, 'nouns');\n          //   // Count occurrences of each noun\n          //   const nounCounts = {};\n          //   individualNouns.forEach(noun => {\n          //     nounCounts[noun] = (nounCounts[noun] || 0) + 1;\n          //   });\n\n          //   // Find most repeated noun\n          //   let mostRepeatedNoun;\n          //   let maxCount = 0;\n          //   console.log('6', nounCounts);\n          //   Object.entries(nounCounts).forEach(([noun, count]) => {\n          //     if (count > maxCount) {\n          //       mostRepeatedNoun = noun;\n          //       maxCount = count;\n          //     }\n          //     // else {\n          //     //   mostRepeatedNoun = ''\n          //     // }\n          //   });\n          //   console.log('6', mostRepeatedNoun);\n          //   // Set the most repeated noun in the state\n          //   this.setState({mostRepeatedNoun});\n          // })\n          .catch(error => {\n            console.error('Error fetching restaurant details:', error);\n          });\n        } else {\n          console.error('Error fetching nearby restaurants:', status);\n        }\n      });\n    };\n    // Function to handle button click to move to the next restaurant\n    this.moveToNextRestaurant = () => {\n      this.setState(prevState => ({\n        currentIndex: prevState.currentIndex + 1\n      }));\n    };\n    // Start Page\n    this.handleButtonClick = () => {\n      this.setState(prevState => ({\n        isSpinning: !prevState.isSpinning\n      }));\n      setTimeout(() => {\n        this.setState({\n          showFirstPage: false\n        });\n      }, 3000);\n    };\n    this.renderFirstPage = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: this.state.isSpinning ? \"custom-heading, spinning-text\" : \"custom-heading\",\n          style: {\n            marginTop: '50px',\n            fontSize: '200px'\n          },\n          children: \"W2E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleButtonClick,\n          style: {\n            marginTop: '20px',\n            padding: '10px',\n            backgroundColor: '#ff5722',\n            color: 'black',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer'\n          },\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  renderRestaurantPage() {\n    const {\n      bestRestaurants,\n      currentIndex\n    } = this.state;\n    const restaurant = bestRestaurants[currentIndex] || {};\n    // const firstSentence = restaurant.topReview.text.split(/[.!?]/);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [bestRestaurants.length - 1 >= currentIndex ?\n      /*#__PURE__*/\n      // Display restaurant details\n      _jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: '0px',\n          marginBottom: '0px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"custom-heading\",\n          style: {\n            marginTop: '50px',\n            fontSize: '100px'\n          },\n          children: restaurant.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            textAlign: 'center',\n            marginTop: '30px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: restaurant.photos && restaurant.photos.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                href: `https://www.google.com/maps/search/?api=1&query=${restaurant.name}&query_place_id=${restaurant.place_id}`,\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: restaurant.photos[0].getUrl(),\n                  alt: restaurant.name,\n                  style: {\n                    width: '200px',\n                    height: '150px',\n                    marginBottom: '5px'\n                  }\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 21\n              }, this)\n            }, void 0, false)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              marginBottom: '90px',\n              fontSize: '100px'\n            },\n            children: this.state.mostRepeatedNouns[currentIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: '0px',\n          marginBottom: '0px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"custom-heading\",\n          style: {\n            marginTop: '50px',\n            fontSize: '100px'\n          },\n          children: \"Hmm...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"custom-body\",\n          style: {\n            height: '190px',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginTop: '20px'\n          },\n          children: \"Why don't you use Google Maps now?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 13\n      }, this)\n      // Display a paragraph if no restaurants are available\n      , /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"custom-body\",\n        onClick: this.moveToNextRestaurant,\n        style: {\n          marginTop: '20px',\n          padding: '10px',\n          backgroundColor: '#ff5722',\n          color: 'black',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Next Restaurant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    const {\n      showFirstPage\n    } = this.state;\n    if (showFirstPage) {\n      return this.renderFirstPage();\n    } else {\n      // if (this.restReady) {\n      return this.renderRestaurantPage();\n      // }\n    }\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCnv1eojLjZwtHpBXy_QZ3bSv2slXEsLyc'\n})(NearbyRestaurants);","map":{"version":3,"names":["React","Component","Map","GoogleApiWrapper","nlp","jsxDEV","_jsxDEV","Fragment","_Fragment","NearbyRestaurants","constructor","args","state","bestRestaurants","nextPageToken","showMapModal","currentLocation","currentIndex","showFirstPage","isSpinning","restReady","searchNearbyRestaurants","position","google","props","latitude","longitude","coords","placesService","maps","places","PlacesService","document","createElement","request","location","LatLng","radius","type","rankBy","RankBy","PROMINENCE","types","nearbySearch","results","status","pagination","PlacesServiceStatus","OK","filteredRestaurants","filter","restaurant","rating","user_ratings_total","name","toLowerCase","includes","promises","map","Promise","resolve","reject","detailsRequest","placeId","place_id","fields","getDetails","placeDetails","topReview","reviews","length","console","log","error","reviewPromises","reviewTexts","review","text","all","then","restaurantsWithReviews","slice","reviewTextsArray","setState","mostRepeatedNouns","forEach","mostRepeatedNoun","maxCount","allReviewsText","concat","apply","giantString","join","allWords","flatMap","split","doc","nouns","out","pronounsList","articlesList","customList","exclusionList","individualNouns","phrase","word","nounCounts","noun","Object","entries","count","push","catch","moveToNextRestaurant","prevState","handleButtonClick","setTimeout","renderFirstPage","style","display","flexDirection","alignItems","justifyContent","height","children","className","marginTop","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","backgroundColor","color","border","borderRadius","cursor","componentDidMount","navigator","geolocation","getCurrentPosition","renderRestaurantPage","marginBottom","textAlign","photos","href","target","rel","src","getUrl","alt","width","render","apiKey"],"sources":["/Users/friday/Documents/w2e/frontend/src/components/NearbyRestaurants.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport './style.css';\nimport nlp from 'compromise'; \n\n\nclass NearbyRestaurants extends Component {\n  state = {\n    bestRestaurants: [],\n    nextPageToken: null, // Initialize nextPageToken state\n    showMapModal: false, // State to control visibility of the map modal\n    currentLocation: null, // Store current location\n    currentIndex: 0,\n    showFirstPage: true,\n    isSpinning : false,\n    restReady : false,\n  };\n\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  searchNearbyRestaurants = (position) => {\n    const { google } = this.props;\n    const { latitude, longitude } = position.coords;\n\n    // Create a PlacesService instance\n    const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n    // Define search parameters\n    const request = {\n      location: new google.maps.LatLng(latitude, longitude),\n      radius: 50000, // Search radius in meters (adjust as needed)\n      type: 'restaurant',\n      rankBy: google.maps.places.RankBy.PROMINENCE, // Sort by prominence\n      types: ['restaurant'] \n    };\n\n    // Perform nearby search\n    placesService.nearbySearch(request, (results, status, pagination) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        // Filter restaurants with 4+ stars and 50+ reviews\n        const filteredRestaurants = results.filter(restaurant => {\n          return restaurant.rating >= 4.0 && restaurant.user_ratings_total >= 30 &&\n           !restaurant.name.toLowerCase().includes('hotel');\n        });\n\n        // Fetch category for each restaurant\n        const promises = filteredRestaurants.map(restaurant => {\n          return new Promise((resolve, reject) => {\n            // Get details for each restaurant\n            const detailsRequest = {\n              placeId: restaurant.place_id,\n              fields: ['name', 'types', 'reviews'] // Add 'reviews' field to retrieve reviews\n            };\n            placesService.getDetails(detailsRequest, (placeDetails, status) => {\n              if (status === google.maps.places.PlacesServiceStatus.OK) {\n                // const category = placeDetails.types && placeDetails.types.length > 0 ? placeDetails.types[0] : 'Uncategorized';\n                const topReview = placeDetails.reviews && placeDetails.reviews.length > 0 ? placeDetails.reviews[0] : 'null'; // Get the top review\n                console.log('res fetch resolved', status);\n                resolve({ ...restaurant, topReview });\n              } else {\n                console.error('Error fetching restaurant details:', status);\n                reject(status);\n              }\n            });\n          });\n        });\n\n      // To find the representative menu\n      // Fetch reviews for each restaurant and extract text\n      const reviewPromises = filteredRestaurants.map(restaurant => {\n        return new Promise((resolve, reject) => {\n          const detailsRequest = {\n            placeId: restaurant.place_id,\n            fields: ['reviews']\n          };\n          placesService.getDetails(detailsRequest, (placeDetails, status) => {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n              // console.log(placeDetails.reviews); \n              const reviews = placeDetails.reviews || [];\n              const reviewTexts = reviews.map(review => review.text);\n              // console.log(reviews, status);\n              // console.log(reviewTexts, status);\n              // console.log(reviewTexts[0], status);\n\n              resolve(reviewTexts); //not empty\n            } else {\n              console.error('Error fetching reviews for restaurant:', status);\n              reject();\n            }\n          });\n        });\n      });\n\n        // Resolve all promises\n        // mapping problem here?\n        Promise.all([...promises, ...reviewPromises])\n          .then(results => {\n            // Separate the restaurant and review results based on the original promise arrays\n            const restaurantsWithReviews = results.slice(0, promises.length);\n            const reviewTextsArray = results.slice(promises.length);\n\n            // Update state with the filtered restaurants, category, and nextPageToken\n            this.setState({ bestRestaurants: restaurantsWithReviews });\n            this.setState({ restReady: true})\n            console.log(reviewTextsArray, 'nok');\n            console.log(reviewTextsArray[0], 'nok_1');\n            // reviewTextsArray.forEach((reviewTexts) => {\n            //   console.log(reviewTexts, 'nok_2');\n            //   reviewTexts.forEach(reviewSet => {\n            //     console.log(reviewSet, 'nok_3');\n            //   });\n\n              \n            // });\n\n            const mostRepeatedNouns = [];\n\n            // Process each set of reviews\n            reviewTextsArray.forEach((reviewTexts) => {\n              // Initialize variables to store most repeated noun for this set of reviews\n              let mostRepeatedNoun;\n              let maxCount = 0;\n              console.log(reviewTexts, 'nok_2');\n              // Flatten reviewTextsArray into a single array of review texts\n              const allReviewsText = [].concat.apply([], reviewTexts);\n              console.log(allReviewsText, 'allReviewsText');\n              const giantString = allReviewsText.join(' '); // Use a space as a separator\n              // const nlp = require('compromise');\n              console.log(giantString, 'giantString');\n              // Tokenization (split text into words)\n              const allWords = allReviewsText.flatMap(text => text.toLowerCase().split(/[\\s\\W]+/));\n              console.log(allWords, 'allWords');\n              // Perform POS tagging\n              const doc = nlp(giantString);\n              const nouns = doc.nouns().out('array');\n\n              // Define a list of common pronouns to filter out\n              const pronounsList = [\"i\", \"you\", \"he\", \"she\", \"it\", \"we\", \"they\", \"me\", \"him\", \"her\", \"us\", \"them\", \"my\", \"your\", \"his\", \"its\", \"our\", \"their\", \"mine\", \"yours\", \"hers\", \"ours\", \"theirs\"];\n              const articlesList = [\"a\", \"an\", \"the\"];\n              const customList = [\"food\", \"place\"];\n\n              // Combine both lists into a single exclusion list\n              const exclusionList = [...pronounsList, ...articlesList, ...customList];\n              \n              // Convert the noun phrases to individual words and filter out pronouns and articles\n              const individualNouns = nouns.flatMap(phrase => phrase.toLowerCase().split(/\\W+/))\n                                                  .filter(word => word && !exclusionList.includes(word));\n              \n              console.log(individualNouns,'individualNouns');\n      \n              // Count occurrences of each noun\n              const nounCounts = {};\n              individualNouns.forEach(noun => {\n                nounCounts[noun] = (nounCounts[noun] || 0) + 1;\n              });\n\n              console.log('here');\n\n              // Find most repeated noun in this set of reviews\n              Object.entries(nounCounts).forEach(([noun, count]) => {\n                if (count > maxCount) {\n                  mostRepeatedNoun = noun;\n                  maxCount = count;\n                }\n              });\n              \n\n                // Store the most repeated noun for this restaurant\n                mostRepeatedNouns.push({ mostRepeatedNoun });\n            });\n\n          // Set the most repeated nouns in the state\n          this.setState({ mostRepeatedNouns });\n          })\n          \n          // .catch(error => {\n          //   console.error('Error fetching restaurant details:', error);\n          // });\n\n          //   // Flatten reviewTextsArray into a single array of review texts\n          //   const allReviewsText = [].concat.apply([], reviewTextsArray);\n          //   const giantString = allReviewsText.join(' '); // Use a space as a separator\n          //   // const nlp = require('compromise');\n          //   console.log(giantString, 'giantString');\n          //   // Tokenization (split text into words)\n          //   const allWords = allReviewsText.flatMap(text => text.toLowerCase().split(/[\\s\\W]+/));\n          //   console.log(allWords, 'allWords');\n          //   // Perform POS tagging\n          //   const doc = nlp(giantString);\n          //   const nouns = doc.nouns().out('array');\n\n          //   // Define a list of common pronouns to filter out\n          //   const pronounsList = [\"i\", \"you\", \"he\", \"she\", \"it\", \"we\", \"they\", \"me\", \"him\", \"her\", \"us\", \"them\", \"my\", \"your\", \"his\", \"its\", \"our\", \"their\", \"mine\", \"yours\", \"hers\", \"ours\", \"theirs\"];\n          //   const articlesList = [\"a\", \"an\", \"the\"];\n          //   const customList = [\"food\", \"place\"];\n\n          //   // Combine both lists into a single exclusion list\n          //   const exclusionList = [...pronounsList, ...articlesList, ...customList];\n            \n          //   // Convert the noun phrases to individual words and filter out pronouns and articles\n          //   const individualNouns = nouns.flatMap(phrase => phrase.toLowerCase().split(/\\W+/))\n          //                                       .filter(word => word && !exclusionList.includes(word));\n            \n          //   console.log(individualNouns,'individualNouns');\n          //   // nouns = individualNouns;\n          //   // console.log(nouns, 'nouns');\n\n          //   // // POS Tagging (identify nouns)\n          //   // const nounRegex = /^N/;\n          //   // const nouns = allWords.filter(word => nounRegex.test(word));\n          //   // console.log(nouns, 'nouns');\n          //   // Count occurrences of each noun\n          //   const nounCounts = {};\n          //   individualNouns.forEach(noun => {\n          //     nounCounts[noun] = (nounCounts[noun] || 0) + 1;\n          //   });\n\n          //   // Find most repeated noun\n          //   let mostRepeatedNoun;\n          //   let maxCount = 0;\n          //   console.log('6', nounCounts);\n          //   Object.entries(nounCounts).forEach(([noun, count]) => {\n          //     if (count > maxCount) {\n          //       mostRepeatedNoun = noun;\n          //       maxCount = count;\n          //     }\n          //     // else {\n          //     //   mostRepeatedNoun = ''\n          //     // }\n          //   });\n          //   console.log('6', mostRepeatedNoun);\n          //   // Set the most repeated noun in the state\n          //   this.setState({mostRepeatedNoun});\n          // })\n          .catch(error => {\n            console.error('Error fetching restaurant details:', error);\n          });\n      } else {\n        console.error('Error fetching nearby restaurants:', status);\n      }\n    });\n  }\n\n  // Function to handle button click to move to the next restaurant\n  moveToNextRestaurant = () => {\n    this.setState(prevState => ({\n      currentIndex: prevState.currentIndex + 1\n    }));\n  };\n\n  // Start Page\n  handleButtonClick = () => {\n    this.setState(prevState => ({\n      isSpinning: !prevState.isSpinning\n    }));\n    setTimeout(() => {\n      this.setState({ showFirstPage: false })\n    }, 3000);\n  };\n\n  renderFirstPage = () => {\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh' }}>\n        <h1 className={this.state.isSpinning ? \"custom-heading, spinning-text\" : \"custom-heading\"} style={{ marginTop: '50px', fontSize: '200px' }}>W2E</h1>\n        <button onClick={this.handleButtonClick} style={{ marginTop: '20px', padding: '10px', backgroundColor: '#ff5722', color: 'black', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>Start</button>\n      </div>\n    );\n  };\n\n  \n\n  renderRestaurantPage() {\n    const { bestRestaurants, currentIndex } = this.state;\n    const restaurant = bestRestaurants[currentIndex] || {};\n    // const firstSentence = restaurant.topReview.text.split(/[.!?]/);\n  \n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {bestRestaurants.length - 1 >= currentIndex ? (\n          // Display restaurant details\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '0px', marginBottom: '0px' }}>\n            <h1 className=\"custom-heading\" style={{ marginTop: '50px', fontSize: '100px' }}>{restaurant.name}</h1>\n            <div style={{ textAlign: 'center', marginTop: '30px' }}>\n              <div>\n                {restaurant.photos && restaurant.photos.length > 0 && (\n                  <>\n                    <a href={`https://www.google.com/maps/search/?api=1&query=${restaurant.name}&query_place_id=${restaurant.place_id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <img src={restaurant.photos[0].getUrl()} alt={restaurant.name} style={{ width: '200px', height: '150px', marginBottom: '5px' }} />\n                    </a>\n                  </>\n                )}\n              </div>\n              {/* <div style={{ width: '300px', height: '200px', border: '1px solid #ccc', padding: '10px', overflow: 'auto' }}> */}\n              {/* <p style={{ marginBottom: '90px' }}>{restaurant.topReview.text.split(' ').slice(0, 20).join(' ')}</p> */}\n              <p style={{ marginBottom: '90px', fontSize: '100px' }}>{this.state.mostRepeatedNouns[currentIndex]}</p>\n              {/* </div> */}\n            </div>\n          </div>\n        ) : (\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '0px', marginBottom: '0px' }}>\n              <h1 className=\"custom-heading\" style={{ marginTop: '50px', fontSize: '100px' }}>Hmm...</h1>\n              <p className=\"custom-body\" style={{ height: '190px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', marginTop: '20px' }}>Why don't you use Google Maps now?</p>\n            </div>\n          // Display a paragraph if no restaurants are available\n        )}\n        {/* Button to move to the next restaurant */}\n        <button className=\"custom-body\" onClick={this.moveToNextRestaurant} style={{ marginTop: '20px', padding: '10px', backgroundColor: '#ff5722', color: 'black', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n          Next Restaurant\n        </button>\n      </div>\n    );\n  }  \n\n\n  render() {\n    const { showFirstPage } = this.state;\n\n    if (showFirstPage) {\n      return this.renderFirstPage();\n    } else {\n      // if (this.restReady) {\n        return this.renderRestaurantPage();\n      // }\n    }\n  }\n}\n\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCnv1eojLjZwtHpBXy_QZ3bSv2slXEsLyc'\n})(NearbyRestaurants);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}