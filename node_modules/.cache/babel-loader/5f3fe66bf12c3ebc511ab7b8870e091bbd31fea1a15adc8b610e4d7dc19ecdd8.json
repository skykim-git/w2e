{"ast":null,"code":"var _jsxFileName = \"/Users/friday/Documents/w2e/frontend/src/components/NearbyRestaurants.jsx\";\nimport React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport './style.css';\nimport './mag.css';\nimport nlp from 'compromise';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NearbyRestaurants extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bestRestaurants: [],\n      // Initialize list of best restaurants\n      nextPageToken: null,\n      // Initialize nextPageToken state\n      showMapModal: false,\n      // State to control visibility of the map modal\n      currentLocation: null,\n      // Store current location\n      currentIndex: 0,\n      // Index for iterating list of bes restaurnats\n      showFirstPage: true,\n      // State to control visibility of the start page\n      isSpinning: false,\n      // State to control start page text spinning\n      restReady: false //\n    };\n    // Main function for best restaurant search\n    this.searchNearbyRestaurants = position => {\n      const {\n        google\n      } = this.props;\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n\n      // Create a PlacesService instance\n      const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n      // Define search parameters\n      const request = {\n        location: new google.maps.LatLng(latitude, longitude),\n        radius: 50000,\n        // Search radius in meters (adjust as needed)\n        type: 'restaurant',\n        rankBy: google.maps.places.RankBy.PROMINENCE,\n        // Sort by prominence\n        types: ['restaurant']\n      };\n      console.log(process.env.API_KEY);\n\n      // ***NOT WORKING PROPERLY // Since API can only retreive 5 reviews per restaurnant at the moment, it trys to get more.\n      function fetchMoreReviews(nextPageToken) {\n        return new Promise((resolve, reject) => {\n          // Make request to fetch additional reviews using nextPageToken\n          const additionalRequest = {\n            nextPageToken: nextPageToken\n          };\n          placesService.getDetails(additionalRequest, (placeDetails, status) => {\n            if (status === google.maps.places.PlacesServiceStatus.OK) {\n              const additionalReviews = placeDetails.reviews || [];\n              const additionalReviewTexts = additionalReviews.map(review => review.text);\n              resolve(additionalReviewTexts);\n            } else {\n              console.error('Error fetching additional reviews:', status);\n              reject();\n            }\n          });\n        });\n      }\n\n      // Performs nearby search\n      placesService.nearbySearch(request, (results, status, pagination) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          // Filter restaurants with 4+ stars and 50+ reviews\n          const filteredRestaurants = results.filter(restaurant => {\n            return restaurant.rating >= 4.0 && restaurant.user_ratings_total >= 30 && !restaurant.name.toLowerCase().includes('hotel');\n          });\n\n          // Fetch category for each restaurant\n          const promises = filteredRestaurants.map(restaurant => {\n            return new Promise((resolve, reject) => {\n              // Get details for each restaurant\n              const detailsRequest = {\n                placeId: restaurant.place_id,\n                fields: ['name', 'types', 'reviews'] // Add 'reviews' field to retrieve reviews\n              };\n              placesService.getDetails(detailsRequest, (placeDetails, status) => {\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\n                  // const category = placeDetails.types && placeDetails.types.length > 0 ? placeDetails.types[0] : 'Uncategorized';\n                  const topReview = placeDetails.reviews && placeDetails.reviews.length > 0 ? placeDetails.reviews[0] : 'null'; // Get the top review\n                  resolve({\n                    ...restaurant,\n                    topReview\n                  });\n                } else {\n                  console.error('Error fetching restaurant details:', status);\n                  reject(status);\n                }\n              });\n            });\n          });\n\n          // To find the representative menu, fetch reviews for each restaurant and extract text\n          const reviewPromises = filteredRestaurants.map(restaurant => {\n            return new Promise((resolve, reject) => {\n              const detailsRequest = {\n                placeId: restaurant.place_id,\n                fields: ['reviews']\n              };\n              placesService.getDetails(detailsRequest, (placeDetails, status) => {\n                if (status === google.maps.places.PlacesServiceStatus.OK) {\n                  // console.log(placeDetails.reviews); \n                  const reviews = placeDetails.reviews || [];\n                  const reviewTexts = reviews.map(review => review.text);\n                  // Check if there is a next page token and fetch more reviews if available\n                  console.log('wtf');\n                  console.log(placeDetails.next_page_token, 'nextpagetoken');\n                  if (placeDetails.next_page_token) {\n                    // Make another request to fetch more reviews\n                    fetchMoreReviews(placeDetails.next_page_token).then(additionalReviews => {\n                      resolve([...reviewTexts, ...additionalReviews]);\n                    }).catch(error => {\n                      console.error('Error fetching additional reviews:', error);\n                      resolve(reviewTexts); // Resolve with existing reviews if fetch fails\n                    });\n                  } else {\n                    console.log('nomoreview');\n                    resolve(reviewTexts); // Resolve with current reviews if no next page token\n                  }\n                  // console.log(reviews, status);\n                  // console.log(reviewTexts, status);\n                  // console.log(reviewTexts[0], status);\n\n                  resolve(reviewTexts); //not empty\n                } else {\n                  console.error('Error fetching reviews for restaurant:', status);\n                  reject();\n                }\n              });\n            });\n          });\n\n          // Resolve all promises\n          // mapping problem here?\n          Promise.all([...promises, ...reviewPromises]).then(results => {\n            // Separate the restaurant and review results based on the original promise arrays\n            const restaurantsWithReviews = results.slice(0, promises.length);\n            const reviewTextsArray = results.slice(promises.length);\n            // Update state with the filtered restaurants, category, and nextPageToken\n            this.setState({\n              bestRestaurants: restaurantsWithReviews\n            });\n            this.setState({\n              restReady: true\n            });\n            const mostRepeatedNouns = [];\n            // Process each set of reviews\n            reviewTextsArray.forEach(reviewTexts => {\n              // Initialize variables to store most repeated noun for this set of reviews\n              let mostRepeatedNoun;\n              let maxCount = 0;\n              // console.log(reviewTexts, 'nok_2');\n              // Flatten reviewTextsArray into a single array of review texts\n              const allReviewsText = [].concat.apply([], reviewTexts);\n              // console.log(allReviewsText, 'allReviewsText');\n              const giantString = allReviewsText.join(' '); // Use a space as a separator\n              // const nlp = require('compromise');\n              // console.log(giantString, 'giantString');\n              // Tokenization (split text into words)\n              const allWords = allReviewsText.flatMap(text => text.toLowerCase().split(/[\\s\\W]+/));\n              // console.log(allWords, 'allWords');\n              // Perform POS tagging\n              const doc = nlp(giantString);\n              const nouns = doc.nouns().out('array');\n\n              // Define a list of common pronouns to filter out\n              const pronounsList = [\"i\", \"you\", \"he\", \"she\", \"it\", \"we\", \"they\", \"me\", \"him\", \"her\", \"us\", \"them\", \"my\", \"your\", \"his\", \"its\", \"our\", \"their\", \"mine\", \"yours\", \"hers\", \"ours\", \"theirs\"];\n              const articlesList = [\"a\", \"an\", \"the\"];\n              const customList = [\"food\", \"place\", \"staff\", \"won\", \"bad\", \"great\"];\n              const whyNotInList = [\"and\"];\n\n              // Combine both lists into a single exclusion list\n              const exclusionList = [...pronounsList, ...articlesList, ...customList, ...whyNotInList];\n\n              // Convert the noun phrases to individual words and filter out pronouns and articles\n              const individualNouns = nouns.flatMap(phrase => phrase.toLowerCase().split(/\\W+/)).filter(word => word && !exclusionList.includes(word));\n\n              // console.log(individualNouns,'individualNouns');\n\n              // Count occurrences of each noun\n              const nounCounts = {};\n              individualNouns.forEach(noun => {\n                nounCounts[noun] = (nounCounts[noun] || 0) + 1;\n              });\n\n              // console.log('here');\n\n              // Find most repeated noun in this set of reviews\n              Object.entries(nounCounts).forEach(([noun, count]) => {\n                if (count > maxCount) {\n                  mostRepeatedNoun = noun;\n                  maxCount = count;\n                }\n              });\n\n              // console.log('here2');\n              // Store the most repeated noun for this restaurant if found\n              if (mostRepeatedNoun !== undefined) {\n                mostRepeatedNouns.push(mostRepeatedNoun); // Store just the noun, not the restaurant ID\n              } else {\n                console.warn('No most repeated noun found for restaurant:');\n              }\n            });\n\n            // Set the most repeated nouns in the state\n            this.setState({\n              mostRepeatedNouns\n            });\n          }).catch(error => {\n            console.error('Error fetching restaurant details:', error);\n          });\n        } else {\n          console.error('Error fetching nearby restaurants:', status);\n        }\n      });\n    };\n    // Function to handle button click to move to the next restaurant\n    this.moveToNextRestaurant = () => {\n      this.setState(prevState => ({\n        currentIndex: prevState.currentIndex + 1\n      }));\n    };\n    // Function to handle button click to move to the previous restaurant\n    this.handlePrevious = () => {\n      this.setState(prevState => ({\n        currentIndex: prevState.currentIndex > 0 ? prevState.currentIndex - 1 : 0\n      }));\n    };\n    // Function to handel button click to spin the w2e text and show restaruant pages\n    this.handleButtonClick = () => {\n      this.setState(prevState => ({\n        isSpinning: !prevState.isSpinning\n      }));\n      setTimeout(() => {\n        this.setState({\n          showFirstPage: false\n        });\n      }, 3000);\n    };\n    // Renders the first page\n    this.renderFirstPage = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          justifyContent: 'center',\n          height: '100vh'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: this.state.isSpinning ? \"custom-heading, spinning-text\" : \"custom-heading\",\n          style: {\n            marginTop: '50px',\n            fontSize: '200px'\n          },\n          children: \"W2E\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 251,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.handleButtonClick,\n          style: {\n            marginTop: '20px',\n            padding: '10px',\n            backgroundColor: '#ff5722',\n            color: 'black',\n            border: 'none',\n            borderRadius: '5px',\n            cursor: 'pointer'\n          },\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 250,\n        columnNumber: 7\n      }, this);\n    };\n  }\n  // Lifecycle method called when the component is first added to the DOM\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  // Renders the restaurant page\n  renderRestaurantPage() {\n    const {\n      bestRestaurants,\n      currentIndex\n    } = this.state;\n    const restaurant = bestRestaurants[currentIndex] || {};\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        flexDirection: 'column',\n        alignItems: 'center'\n      },\n      children: [bestRestaurants.length - 1 >= currentIndex ?\n      /*#__PURE__*/\n      // Display restaurant details\n      _jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: '0px',\n          marginBottom: '0px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"custom-heading\",\n          style: {\n            marginTop: '50px',\n            fontSize: '100px',\n            marginBottom: '0px'\n          },\n          children: restaurant.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 266,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"magnifying-glass\",\n          children: /*#__PURE__*/_jsxDEV(\"svg\", {\n            viewBox: \"0 0 500 200\",\n            className: \"svg-container\",\n            children: [/*#__PURE__*/_jsxDEV(\"defs\", {\n              children: /*#__PURE__*/_jsxDEV(\"filter\", {\n                id: \"convexLens\",\n                children: [/*#__PURE__*/_jsxDEV(\"feGaussianBlur\", {\n                  in: \"SourceGraphic\",\n                  stdDeviation: \"5\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"feComponentTransfer\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"feFuncR\", {\n                    type: \"table\",\n                    tableValues: \"0 0.7 1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"feFuncG\", {\n                    type: \"table\",\n                    tableValues: \"0 0.7 1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"feFuncB\", {\n                    type: \"table\",\n                    tableValues: \"0 0.7 1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 23\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"feDisplacementMap\", {\n                  in: \"SourceGraphic\",\n                  scale: \"20\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 278,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 271,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n              x: \"50%\",\n              y: \"50%\",\n              textAnchor: \"middle\",\n              dominantBaseline: \"middle\",\n              className: \"text-content\",\n              children: this.state.mostRepeatedNouns[currentIndex]\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 281,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 267,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n          marginTop: '0px',\n          marginBottom: '0px'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"custom-heading\",\n          style: {\n            marginTop: '50px',\n            fontSize: '100px'\n          },\n          children: \"Hmm...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"custom-body\",\n          style: {\n            height: '190px',\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n            justifyContent: 'center',\n            marginTop: '20px'\n          },\n          children: \"Why don't you use Google Maps now?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 13\n      }, this)\n      // Display a paragraph if no restaurants are available\n      , /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"custom-body\",\n        onClick: this.moveToNextRestaurant,\n        style: {\n          marginTop: '0px',\n          padding: '10px',\n          backgroundColor: '#ff5722',\n          color: 'black',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Next Restaurant\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"custom-body\",\n        onClick: this.handlePrevious,\n        disabled: currentIndex === 0,\n        style: {\n          marginTop: '20px',\n          padding: '10px',\n          backgroundColor: '#ff5722',\n          color: 'black',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Previous\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this);\n  }\n  render() {\n    const {\n      showFirstPage\n    } = this.state;\n    if (showFirstPage) {\n      return this.renderFirstPage();\n    } else {\n      // if (this.restReady) {\n      return this.renderRestaurantPage();\n      // }\n    }\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: process.env.API_KEY\n})(NearbyRestaurants);","map":{"version":3,"names":["React","Component","Map","GoogleApiWrapper","nlp","jsxDEV","_jsxDEV","NearbyRestaurants","constructor","args","state","bestRestaurants","nextPageToken","showMapModal","currentLocation","currentIndex","showFirstPage","isSpinning","restReady","searchNearbyRestaurants","position","google","props","latitude","longitude","coords","placesService","maps","places","PlacesService","document","createElement","request","location","LatLng","radius","type","rankBy","RankBy","PROMINENCE","types","console","log","process","env","API_KEY","fetchMoreReviews","Promise","resolve","reject","additionalRequest","getDetails","placeDetails","status","PlacesServiceStatus","OK","additionalReviews","reviews","additionalReviewTexts","map","review","text","error","nearbySearch","results","pagination","filteredRestaurants","filter","restaurant","rating","user_ratings_total","name","toLowerCase","includes","promises","detailsRequest","placeId","place_id","fields","topReview","length","reviewPromises","reviewTexts","next_page_token","then","catch","all","restaurantsWithReviews","slice","reviewTextsArray","setState","mostRepeatedNouns","forEach","mostRepeatedNoun","maxCount","allReviewsText","concat","apply","giantString","join","allWords","flatMap","split","doc","nouns","out","pronounsList","articlesList","customList","whyNotInList","exclusionList","individualNouns","phrase","word","nounCounts","noun","Object","entries","count","undefined","push","warn","moveToNextRestaurant","prevState","handlePrevious","handleButtonClick","setTimeout","renderFirstPage","style","display","flexDirection","alignItems","justifyContent","height","children","className","marginTop","fontSize","fileName","_jsxFileName","lineNumber","columnNumber","onClick","padding","backgroundColor","color","border","borderRadius","cursor","componentDidMount","navigator","geolocation","getCurrentPosition","renderRestaurantPage","marginBottom","viewBox","id","in","stdDeviation","tableValues","scale","x","y","textAnchor","dominantBaseline","disabled","render","apiKey"],"sources":["/Users/friday/Documents/w2e/frontend/src/components/NearbyRestaurants.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper } from 'google-maps-react';\nimport './style.css';\nimport './mag.css';\nimport nlp from 'compromise'; \n\nclass NearbyRestaurants extends Component {\n  state = {\n    bestRestaurants: [], // Initialize list of best restaurants\n    nextPageToken: null, // Initialize nextPageToken state\n    showMapModal: false, // State to control visibility of the map modal\n    currentLocation: null, // Store current location\n    currentIndex: 0, // Index for iterating list of bes restaurnats\n    showFirstPage: true, // State to control visibility of the start page\n    isSpinning : false, // State to control start page text spinning\n    restReady : false, //\n  };\n\n  // Lifecycle method called when the component is first added to the DOM\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  \n  // Main function for best restaurant search\n  searchNearbyRestaurants = (position) => {\n    const { google } = this.props;\n    const { latitude, longitude } = position.coords;\n\n    // Create a PlacesService instance\n    const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n    // Define search parameters\n    const request = {\n      location: new google.maps.LatLng(latitude, longitude),\n      radius: 50000, // Search radius in meters (adjust as needed)\n      type: 'restaurant',\n      rankBy: google.maps.places.RankBy.PROMINENCE, // Sort by prominence\n      types: ['restaurant']\n    };\n\n    console.log(process.env.API_KEY)\n\n    // ***NOT WORKING PROPERLY // Since API can only retreive 5 reviews per restaurnant at the moment, it trys to get more.\n    function fetchMoreReviews(nextPageToken) {\n      return new Promise((resolve, reject) => {\n        // Make request to fetch additional reviews using nextPageToken\n        const additionalRequest = {\n          nextPageToken: nextPageToken\n        };\n        placesService.getDetails(additionalRequest, (placeDetails, status) => {\n          if (status === google.maps.places.PlacesServiceStatus.OK) {\n            const additionalReviews = placeDetails.reviews || [];\n            const additionalReviewTexts = additionalReviews.map(review => review.text);\n            resolve(additionalReviewTexts);\n          } else {\n            console.error('Error fetching additional reviews:', status);\n            reject();\n          }\n        });\n      });\n    }\n\n    // Performs nearby search\n    placesService.nearbySearch(request, (results, status, pagination) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n\n        // Filter restaurants with 4+ stars and 50+ reviews\n        const filteredRestaurants = results.filter(restaurant => {\n          return restaurant.rating >= 4.0 && restaurant.user_ratings_total >= 30 &&\n           !restaurant.name.toLowerCase().includes('hotel');\n        });\n\n        // Fetch category for each restaurant\n        const promises = filteredRestaurants.map(restaurant => {\n          return new Promise((resolve, reject) => {\n            // Get details for each restaurant\n            const detailsRequest = {\n              placeId: restaurant.place_id,\n              fields: ['name', 'types', 'reviews'] // Add 'reviews' field to retrieve reviews\n            };\n            placesService.getDetails(detailsRequest, (placeDetails, status) => {\n              if (status === google.maps.places.PlacesServiceStatus.OK) {\n                // const category = placeDetails.types && placeDetails.types.length > 0 ? placeDetails.types[0] : 'Uncategorized';\n                const topReview = placeDetails.reviews && placeDetails.reviews.length > 0 ? placeDetails.reviews[0] : 'null'; // Get the top review\n                resolve({ ...restaurant, topReview });\n              } else {\n                console.error('Error fetching restaurant details:', status);\n                reject(status);\n              }\n            });\n          });\n        });\n        \n        // To find the representative menu, fetch reviews for each restaurant and extract text\n        const reviewPromises = filteredRestaurants.map(restaurant => {\n          return new Promise((resolve, reject) => {\n            const detailsRequest = {\n              placeId: restaurant.place_id,\n              fields: ['reviews']\n            };\n            placesService.getDetails(detailsRequest, (placeDetails, status) => {\n              if (status === google.maps.places.PlacesServiceStatus.OK) {\n                // console.log(placeDetails.reviews); \n                const reviews = placeDetails.reviews || [];\n                const reviewTexts = reviews.map(review => review.text);\n                // Check if there is a next page token and fetch more reviews if available\n                console.log('wtf');\n                console.log(placeDetails.next_page_token,'nextpagetoken');\n                if (placeDetails.next_page_token) {\n                  // Make another request to fetch more reviews\n                  fetchMoreReviews(placeDetails.next_page_token)\n                    .then(additionalReviews => {\n                      resolve([...reviewTexts, ...additionalReviews]);\n                    })\n                    .catch(error => {\n                      console.error('Error fetching additional reviews:', error);\n                      resolve(reviewTexts); // Resolve with existing reviews if fetch fails\n                    });\n                } else {\n                  console.log('nomoreview')\n                  resolve(reviewTexts); // Resolve with current reviews if no next page token\n                }\n                // console.log(reviews, status);\n                // console.log(reviewTexts, status);\n                // console.log(reviewTexts[0], status);\n\n                resolve(reviewTexts); //not empty\n              } else {\n                console.error('Error fetching reviews for restaurant:', status);\n                reject();\n              }\n            });\n          });\n        });\n\n        // Resolve all promises\n        // mapping problem here?\n        Promise.all([...promises, ...reviewPromises])\n          .then(results => {\n            // Separate the restaurant and review results based on the original promise arrays\n            const restaurantsWithReviews = results.slice(0, promises.length);\n            const reviewTextsArray = results.slice(promises.length);\n            // Update state with the filtered restaurants, category, and nextPageToken\n            this.setState({ bestRestaurants: restaurantsWithReviews });\n            this.setState({ restReady: true})\n            const mostRepeatedNouns = [];\n            // Process each set of reviews\n            reviewTextsArray.forEach((reviewTexts) => {\n              // Initialize variables to store most repeated noun for this set of reviews\n              let mostRepeatedNoun;\n              let maxCount = 0;\n              // console.log(reviewTexts, 'nok_2');\n              // Flatten reviewTextsArray into a single array of review texts\n              const allReviewsText = [].concat.apply([], reviewTexts);\n              // console.log(allReviewsText, 'allReviewsText');\n              const giantString = allReviewsText.join(' '); // Use a space as a separator\n              // const nlp = require('compromise');\n              // console.log(giantString, 'giantString');\n              // Tokenization (split text into words)\n              const allWords = allReviewsText.flatMap(text => text.toLowerCase().split(/[\\s\\W]+/));\n              // console.log(allWords, 'allWords');\n              // Perform POS tagging\n              const doc = nlp(giantString);\n              const nouns = doc.nouns().out('array');\n\n              // Define a list of common pronouns to filter out\n              const pronounsList = [\"i\", \"you\", \"he\", \"she\", \"it\", \"we\", \"they\", \"me\", \"him\", \"her\", \"us\", \"them\", \"my\", \"your\", \"his\", \"its\", \"our\", \"their\", \"mine\", \"yours\", \"hers\", \"ours\", \"theirs\"];\n              const articlesList = [\"a\", \"an\", \"the\"];\n              const customList = [\"food\", \"place\", \"staff\", \"won\", \"bad\", \"great\"];\n              const whyNotInList = [\"and\"]\n\n              // Combine both lists into a single exclusion list\n              const exclusionList = [...pronounsList, ...articlesList, ...customList, ...whyNotInList];\n              \n              // Convert the noun phrases to individual words and filter out pronouns and articles\n              const individualNouns = nouns.flatMap(phrase => phrase.toLowerCase().split(/\\W+/))\n                                                  .filter(word => word && !exclusionList.includes(word));\n              \n              // console.log(individualNouns,'individualNouns');\n      \n              // Count occurrences of each noun\n              const nounCounts = {};\n              individualNouns.forEach(noun => {\n                nounCounts[noun] = (nounCounts[noun] || 0) + 1;\n              });\n\n              // console.log('here');\n\n              // Find most repeated noun in this set of reviews\n              Object.entries(nounCounts).forEach(([noun, count]) => {\n                if (count > maxCount) {\n                  mostRepeatedNoun = noun;\n                  maxCount = count;\n                }\n              });\n\n              // console.log('here2');\n              // Store the most repeated noun for this restaurant if found\n              if (mostRepeatedNoun !== undefined) {\n                mostRepeatedNouns.push(mostRepeatedNoun); // Store just the noun, not the restaurant ID\n              } else {\n                console.warn('No most repeated noun found for restaurant:');\n              }\n            });\n\n          // Set the most repeated nouns in the state\n          this.setState({ mostRepeatedNouns });\n          })\n          .catch(error => {\n            console.error('Error fetching restaurant details:', error);\n          });\n      } else {\n        console.error('Error fetching nearby restaurants:', status);\n      }\n    });\n  }\n\n  // Function to handle button click to move to the next restaurant\n  moveToNextRestaurant = () => {\n    this.setState(prevState => ({\n      currentIndex: prevState.currentIndex + 1\n    }));\n  };\n\n  // Function to handle button click to move to the previous restaurant\n  handlePrevious = () => {\n    this.setState(prevState => ({\n      currentIndex: prevState.currentIndex > 0 ? prevState.currentIndex - 1 : 0\n    }));\n  }\n\n  // Function to handel button click to spin the w2e text and show restaruant pages\n  handleButtonClick = () => {\n    this.setState(prevState => ({\n      isSpinning: !prevState.isSpinning\n    }));\n    setTimeout(() => {\n      this.setState({ showFirstPage: false })\n    }, 3000);\n  };\n\n  // Renders the first page\n  renderFirstPage = () => {\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', height: '100vh' }}>\n        <h1 className={this.state.isSpinning ? \"custom-heading, spinning-text\" : \"custom-heading\"} style={{ marginTop: '50px', fontSize: '200px' }}>W2E</h1>\n        <button onClick={this.handleButtonClick} style={{ marginTop: '20px', padding: '10px', backgroundColor: '#ff5722', color: 'black', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>Start</button>\n      </div>\n    );\n  };\n\n  // Renders the restaurant page\n  renderRestaurantPage() {\n    const { bestRestaurants, currentIndex } = this.state;\n    const restaurant = bestRestaurants[currentIndex] || {};\n    return (\n      <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center' }}>\n        {bestRestaurants.length - 1 >= currentIndex ? (\n          // Display restaurant details\n          <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '0px', marginBottom: '0px' }}>\n            <h1 className=\"custom-heading\" style={{ marginTop: '50px', fontSize: '100px', marginBottom: '0px'}}>{restaurant.name}</h1>\n            <div className=\"magnifying-glass\">\n              <svg viewBox=\"0 0 500 200\" className=\"svg-container\">\n                <defs>\n                  {/* Define a filter with feDistortion component for lens effect */}\n                  <filter id=\"convexLens\">\n                    <feGaussianBlur in=\"SourceGraphic\" stdDeviation=\"5\" />\n                    <feComponentTransfer>\n                      <feFuncR type=\"table\" tableValues=\"0 0.7 1\" />\n                      <feFuncG type=\"table\" tableValues=\"0 0.7 1\" />\n                      <feFuncB type=\"table\" tableValues=\"0 0.7 1\" />\n                    </feComponentTransfer>\n                    <feDisplacementMap in=\"SourceGraphic\" scale=\"20\" />\n                  </filter>\n                </defs>\n                <text x=\"50%\" y=\"50%\" textAnchor=\"middle\" dominantBaseline=\"middle\" className=\"text-content\">\n                {this.state.mostRepeatedNouns[currentIndex]}\n                </text>\n              </svg>\n            </div>\n            {/* <div style={{ textAlign: 'center', marginTop: '0px' }}> */}\n              {/* Some text curving example */}\n              {/* <svg className=\"curved-text\" viewBox=\"0 0 425 300\">\n                <path id=\"curve\" d=\"M6,150C49.63,93,105.79,36.65,156.2,47.55,207.89,58.74,213,131.91,264,150c40.67,14.43,108.57-6.91,229-145\" />\n                <text x=\"25\">\n                  <textPath href=\"#curve\">\n                    Dangerous Curves Ahead\n                  </textPath>\n                </text>\n              </svg> */}\n              {/* DISPLAYS RESTAURANT PHOTO */}\n              {/* <div>\n                {restaurant.photos && restaurant.photos.length > 0 && (\n                  <>\n                    <a href={`https://www.google.com/maps/search/?api=1&query=${restaurant.name}&query_place_id=${restaurant.place_id}`} target=\"_blank\" rel=\"noopener noreferrer\">\n                      <img src={restaurant.photos[0].getUrl()} alt={restaurant.name} style={{ width: '200px', height: '150px', marginBottom: '5px' }} />\n                    </a>\n                  </>\n                )}\n              </div> */}\n              {/* <p className=\"lens-effect\" style={{ marginBottom: '90px', fontSize: '100px', color:'#FF9800'  }}>{this.state.mostRepeatedNouns[currentIndex]}</p>\n            </div> */}\n          </div>\n        ) : (\n            <div style={{ display: 'flex', flexDirection: 'column', alignItems: 'center', marginTop: '0px', marginBottom: '0px' }}>\n              <h1 className=\"custom-heading\" style={{ marginTop: '50px', fontSize: '100px' }}>Hmm...</h1>\n              <p className=\"custom-body\" style={{ height: '190px', display: 'flex', flexDirection: 'column', alignItems: 'center', justifyContent: 'center', marginTop: '20px' }}>Why don't you use Google Maps now?</p>\n            </div>\n          // Display a paragraph if no restaurants are available\n        )}\n        {/* Button to move to the next restaurant */}\n        <button className=\"custom-body\" onClick={this.moveToNextRestaurant} style={{ marginTop: '0px', padding: '10px', backgroundColor: '#ff5722', color: 'black', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n          Next Restaurant\n        </button>\n        <button className=\"custom-body\" onClick={this.handlePrevious} disabled={currentIndex === 0} style={{ marginTop: '20px', padding: '10px', backgroundColor: '#ff5722', color: 'black', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n          Previous\n        </button>\n      </div>\n    );\n  }  \n\n\n  render() {\n    const { showFirstPage } = this.state;\n    if (showFirstPage) {\n      return this.renderFirstPage();\n    } else {\n      // if (this.restReady) {\n        return this.renderRestaurantPage();\n      // }\n    }\n  }\n}\n\n\nexport default GoogleApiWrapper({\n  apiKey: process.env.API_KEY\n})(NearbyRestaurants);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}