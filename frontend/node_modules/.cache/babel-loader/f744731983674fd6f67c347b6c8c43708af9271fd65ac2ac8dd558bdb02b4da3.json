{"ast":null,"code":"var _jsxFileName = \"/Users/friday/Documents/w2e/frontend/src/components/MainPage.jsx\";\nimport React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { toast } from 'react-toastify';\n\n// import TodoItem from './TodoItem';\n// import { selectTodo } from 'redux/selectors';\n// import { fetchTodos } from 'redux/operations';\n// import Pagination from '../utils/Pagination';\nimport NearbyRestaurants from './NearbyRestaurants'; // Import NearbyRestaurants component\n\n// const PAGE_SIZE = 5;\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TodoList = () => {\n  //   const dispatch = useDispatch();\n  //   const todos = useSelector(selectTodo);\n  //   const [currentPage, setCurrentPage] = useState(0);\n  //   const [items, setItems] = useState([]);\n\n  //   useEffect(() => {\n  //     const reversed = [...todos].reverse();\n  //     const paginatedTodos = reversed.slice(\n  //       currentPage * PAGE_SIZE,\n  //       (currentPage + 1) * PAGE_SIZE,\n  //     ).map((todo, index) => ({ ...todo, index: currentPage * PAGE_SIZE + index + 1 }));\n  //     setItems(paginatedTodos);\n  //   }, [currentPage, todos]);\n\n  //   useEffect(() => {\n  //     toast.promise(dispatch(fetchTodos()), {\n  //       pending: 'TODO List is pending',\n  //       success: 'TODO List resolved ðŸ‘Œ',\n  //       error: 'TODO List rejected ðŸ¤¯',\n  //     });\n  //   }, [dispatch]);\n\n  //   const handlePageChange = ({ selected }) => {\n  //     setCurrentPage(selected);\n  //   };\n\n  //   const onDragEnd = result => {\n  //     if (!result.destination) return;\n\n  //     if (\n  //       result.destination.droppableId === result.source.droppableId &&\n  //       result.destination.index === result.source.index\n  //     ) {\n  //       return;\n  //     }\n\n  //     const startIndex = currentPage * PAGE_SIZE; // Calculate the start index based on current page\n  //     const newItems = Array.from(items);\n  //     const [removed] = newItems.splice(result.source.index, 1);\n  //     newItems.splice(result.destination.index, 0, removed);\n\n  //     // Update indices dynamically\n  //     newItems.forEach((item, index) => {\n  //       item.index = startIndex + index + 1;\n  //     });\n\n  //     setItems(newItems);\n  //   };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(NearbyRestaurants, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = TodoList;\nexport default TodoList;\nvar _c;\n$RefreshReg$(_c, \"TodoList\");","map":{"version":3,"names":["React","useEffect","useState","DragDropContext","Droppable","Draggable","NearbyRestaurants","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoList","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/friday/Documents/w2e/frontend/src/components/MainPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n// import { useDispatch, useSelector } from 'react-redux';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n// import { toast } from 'react-toastify';\n\n// import TodoItem from './TodoItem';\n// import { selectTodo } from 'redux/selectors';\n// import { fetchTodos } from 'redux/operations';\n// import Pagination from '../utils/Pagination';\nimport NearbyRestaurants from './NearbyRestaurants'; // Import NearbyRestaurants component\n\n// const PAGE_SIZE = 5;\n\nconst TodoList = () => {\n//   const dispatch = useDispatch();\n//   const todos = useSelector(selectTodo);\n//   const [currentPage, setCurrentPage] = useState(0);\n//   const [items, setItems] = useState([]);\n\n//   useEffect(() => {\n//     const reversed = [...todos].reverse();\n//     const paginatedTodos = reversed.slice(\n//       currentPage * PAGE_SIZE,\n//       (currentPage + 1) * PAGE_SIZE,\n//     ).map((todo, index) => ({ ...todo, index: currentPage * PAGE_SIZE + index + 1 }));\n//     setItems(paginatedTodos);\n//   }, [currentPage, todos]);\n\n//   useEffect(() => {\n//     toast.promise(dispatch(fetchTodos()), {\n//       pending: 'TODO List is pending',\n//       success: 'TODO List resolved ðŸ‘Œ',\n//       error: 'TODO List rejected ðŸ¤¯',\n//     });\n//   }, [dispatch]);\n\n//   const handlePageChange = ({ selected }) => {\n//     setCurrentPage(selected);\n//   };\n\n//   const onDragEnd = result => {\n//     if (!result.destination) return;\n\n//     if (\n//       result.destination.droppableId === result.source.droppableId &&\n//       result.destination.index === result.source.index\n//     ) {\n//       return;\n//     }\n\n//     const startIndex = currentPage * PAGE_SIZE; // Calculate the start index based on current page\n//     const newItems = Array.from(items);\n//     const [removed] = newItems.splice(result.source.index, 1);\n//     newItems.splice(result.destination.index, 0, removed);\n\n//     // Update indices dynamically\n//     newItems.forEach((item, index) => {\n//       item.index = startIndex + index + 1;\n//     });\n\n//     setItems(newItems);\n//   };\n\n  return (\n    <>\n      {/* Display NearbyRestaurants component */}\n      <NearbyRestaurants />\n    </>\n  );\n};\n\nexport default TodoList;\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD;AACA,SAASC,eAAe,EAAEC,SAAS,EAAEC,SAAS,QAAQ,qBAAqB;AAC3E;;AAEA;AACA;AACA;AACA;AACA,OAAOC,iBAAiB,MAAM,qBAAqB,CAAC,CAAC;;AAErD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEA,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EACvB;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;;EAEE,oBACEH,OAAA,CAAAE,SAAA;IAAAE,QAAA,eAEEJ,OAAA,CAACF,iBAAiB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC,gBACrB,CAAC;AAEP,CAAC;AAACC,EAAA,GAxDIN,QAAQ;AA0Dd,eAAeA,QAAQ;AAAC,IAAAM,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}