{"ast":null,"code":"var _jsxFileName = \"/Users/friday/Documents/TaskForceOrganization/frontend/src/components/NearbyRestaurants.jsx\";\nimport React, { Component } from 'react';\nimport { GoogleApiWrapper } from 'google-maps-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass NearbyRestaurants extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      bestRestaurants: []\n    };\n    this.searchNearbyRestaurants = position => {\n      const {\n        google\n      } = this.props;\n      const {\n        latitude,\n        longitude\n      } = position.coords;\n\n      // Create a PlacesService instance\n      const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n      // Define search parameters\n      const request = {\n        location: new google.maps.LatLng(latitude, longitude),\n        radius: 1000,\n        // Search radius in meters (adjust as needed)\n        type: 'restaurant',\n        rankBy: google.maps.places.RankBy.PROMINENCE // Sort by prominence\n      };\n\n      // Perform nearby search\n      placesService.nearbySearch(request, (results, status) => {\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n          // Sort the restaurants based on rating (you can use your own ranking algorithm)\n          const filteredRestaurants = results.filter(restaurant => {\n            return restaurant.rating >= 4 && restaurant.user_ratings_total >= 30;\n          });\n          const sortedRestaurants = filteredRestaurants.sort((a, b) => b.rating - a.rating).slice(0, 5); // Select top 5 restaurants\n\n          // Update state with the best 5 restaurants\n          this.setState({\n            bestRestaurants: sortedRestaurants\n          });\n        } else {\n          console.error('Error fetching nearby restaurants:', status);\n        }\n      });\n    };\n    // Function to categorize restaurant into its cuisine\n    this.getCuisineCategory = restaurantName => {\n      // Implement your logic to categorize each restaurant into its cuisine category\n      // For simplicity, let's assume the cuisine categories based on the restaurant name\n      // You can replace this with a more sophisticated logic if needed\n      const cuisineMap = {\n        '신수돈가스': 'Kooorean',\n        'Chez Pierre': 'French',\n        'Sakura Sushi Bar': 'Japanese',\n        'Taj Mahal Indian Cuisine': 'Indian',\n        'Spice Garden Thai Restaurant': 'Thai'\n      };\n      return cuisineMap[restaurantName] || 'Unknown'; // Default to 'Unknown' if cuisine not found\n    };\n  }\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n  render() {\n    const {\n      bestRestaurants\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Top Nearby Restaurants with 4+ Stars and 50+ Reviews\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: 'flex',\n          flexWrap: 'wrap'\n        },\n        children: bestRestaurants.map((restaurant, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            margin: '10px',\n            textAlign: 'center',\n            width: '200px'\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: restaurant.photos[0].getUrl(),\n              alt: restaurant.name,\n              style: {\n                width: '100%',\n                height: 'auto',\n                marginBottom: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 76,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n              src: restaurant.photos[1].getUrl(),\n              alt: restaurant.name,\n              style: {\n                width: '100%',\n                height: 'auto',\n                marginBottom: '5px'\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            style: {\n              fontWeight: 'bold'\n            },\n            children: restaurant.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: [restaurant.rating, \" stars (\", restaurant.user_ratings_total, \" reviews)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this);\n  }\n}\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCnv1eojLjZwtHpBXy_QZ3bSv2slXEsLyc'\n})(NearbyRestaurants);","map":{"version":3,"names":["React","Component","GoogleApiWrapper","jsxDEV","_jsxDEV","NearbyRestaurants","constructor","args","state","bestRestaurants","searchNearbyRestaurants","position","google","props","latitude","longitude","coords","placesService","maps","places","PlacesService","document","createElement","request","location","LatLng","radius","type","rankBy","RankBy","PROMINENCE","nearbySearch","results","status","PlacesServiceStatus","OK","filteredRestaurants","filter","restaurant","rating","user_ratings_total","sortedRestaurants","sort","a","b","slice","setState","console","error","getCuisineCategory","restaurantName","cuisineMap","componentDidMount","navigator","geolocation","getCurrentPosition","log","render","children","fileName","_jsxFileName","lineNumber","columnNumber","style","display","flexWrap","map","index","margin","textAlign","width","src","photos","getUrl","alt","name","height","marginBottom","fontWeight","apiKey"],"sources":["/Users/friday/Documents/TaskForceOrganization/frontend/src/components/NearbyRestaurants.jsx"],"sourcesContent":["import React, { Component } from 'react';\nimport { GoogleApiWrapper } from 'google-maps-react';\n\nclass NearbyRestaurants extends Component {\n  state = {\n    bestRestaurants: []\n  };\n\n  componentDidMount() {\n    // Get user's current location\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(this.searchNearbyRestaurants);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  }\n\n  searchNearbyRestaurants = (position) => {\n    const { google } = this.props;\n    const { latitude, longitude } = position.coords;\n\n    // Create a PlacesService instance\n    const placesService = new google.maps.places.PlacesService(document.createElement('div'));\n\n    // Define search parameters\n    const request = {\n      location: new google.maps.LatLng(latitude, longitude),\n      radius: 1000, // Search radius in meters (adjust as needed)\n      type: 'restaurant',\n      rankBy: google.maps.places.RankBy.PROMINENCE // Sort by prominence\n    };\n\n    // Perform nearby search\n    placesService.nearbySearch(request, (results, status) => {\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        // Sort the restaurants based on rating (you can use your own ranking algorithm)\n        const filteredRestaurants = results.filter(restaurant => {\n            return restaurant.rating >= 4 && restaurant.user_ratings_total >= 30;\n          });\n        const sortedRestaurants = filteredRestaurants.sort((a, b) => b.rating - a.rating).slice(0, 5); // Select top 5 restaurants\n        \n        // Update state with the best 5 restaurants\n        this.setState({ bestRestaurants: sortedRestaurants });\n      } else {\n        console.error('Error fetching nearby restaurants:', status);\n      }\n    });\n  }\n\n  // Function to categorize restaurant into its cuisine\n  getCuisineCategory = (restaurantName) => {\n    // Implement your logic to categorize each restaurant into its cuisine category\n    // For simplicity, let's assume the cuisine categories based on the restaurant name\n    // You can replace this with a more sophisticated logic if needed\n    const cuisineMap = {\n      '신수돈가스': 'Kooorean',\n      'Chez Pierre': 'French',\n      'Sakura Sushi Bar': 'Japanese',\n      'Taj Mahal Indian Cuisine': 'Indian',\n      'Spice Garden Thai Restaurant': 'Thai'\n    };\n\n    return cuisineMap[restaurantName] || 'Unknown'; // Default to 'Unknown' if cuisine not found\n  }\n\n  render() {\n    const { bestRestaurants } = this.state;\n\n    return (\n        <div>\n          <h2>Top Nearby Restaurants with 4+ Stars and 50+ Reviews</h2>\n          <div style={{ display: 'flex', flexWrap: 'wrap' }}>\n            {bestRestaurants.map((restaurant, index) => (\n              <div key={index} style={{ margin: '10px', textAlign: 'center', width: '200px' }}>\n                <div>\n                  <img src={restaurant.photos[0].getUrl()} alt={restaurant.name} style={{ width: '100%', height: 'auto', marginBottom: '5px' }} />\n                  <img src={restaurant.photos[1].getUrl()} alt={restaurant.name} style={{ width: '100%', height: 'auto', marginBottom: '5px' }} />\n                </div>\n                <p style={{ fontWeight: 'bold' }}>{restaurant.name}</p>\n                <p>{restaurant.rating} stars ({restaurant.user_ratings_total} reviews)</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      );\n    }\n  }\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyCnv1eojLjZwtHpBXy_QZ3bSv2slXEsLyc'\n})(NearbyRestaurants);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}